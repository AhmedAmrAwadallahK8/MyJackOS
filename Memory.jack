// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }
    
    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }
    
    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    } 

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array currentArray;
        var Boolean memAllocated;
        var int currentArraySize, memoryPointer, sizeNeeded;
        let memAllocated = false;
        let currentArray = freeList;
        let sizeNeeded = size + 2;
        
        //Loop through as long as memory hasn't been allocated
        while(~memAllocated){
            
            let currentArraySize = currentArray[1];
            //Current Memory Fragment has room
            
            if(currentArraySize > (sizeNeeded-1)){
                let currentArray[1] = currentArray[1] - sizeNeeded;
                //let currentArray[currentArraySize - sizeNeeded + 2] = 0;
                let currentArray[currentArraySize - sizeNeeded + 3] = size;
                let memoryPointer = currentArraySize - sizeNeeded + 4;
                
                let memAllocated = true;
                
            }

            //Current Memory Fragment does not have room
            if(currentArraySize < sizeNeeded){
                //Current Memory Fragment is the last available memory fragment. Either DFrag or halt the computer
                if(currentArray[0] = 0){
                    do Sys.error(999); //Change later to do Sys.error(999)
                }
                //Move to the next available memory fragment
                else{
                    let currentArray = currentArray[0];
                }
            }
        }
        return memoryPointer;

    }
    
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array currentArray;
        var Boolean memAdded;
        let memAdded = false;
        let currentArray = freeList;
        while(~memAdded){
            if(currentArray[0] = 0){
                let currentArray[0] = o-2;
                let memAdded = true;
            }
            else{
                let currentArray = currentArray[0];
            }
        }
        return;

    } 
      
}
