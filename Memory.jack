// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }
    
    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }
    
    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    } 

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Boolean memAllocated;
        var int currentMemFragSize, memoryPointer, sizeNeeded, memFragPointer;
        let memAllocated = false;
        let memFragPointer = freeList-heap;
        let sizeNeeded = size + 2;
        
        //Loop through as long as memory hasn't been allocated
        while(~memAllocated){
            
            //Adjust the available memory by the current selected memory segment
            let currentMemFragSize = heap[memFragPointer+1];

            //Current Memory Fragment does not have room
            if(currentMemFragSize < sizeNeeded){
                //Current Memory Fragment is the last available memory fragment. Either DFrag or halt the computer
                if(heap[memFragPointer] = 0){
                    do Sys.error(999); //Change later to do Sys.error(999)
                }
                //Move to the next available memory fragment
                else{
                    let memFragPointer = heap[memFragPointer];
                }
            }

            //Current Memory Fragment has room
            if(currentMemFragSize > (sizeNeeded-1)){
                //Remove a fragment of memory that is equal to the size needed and initialize its overhead
                //This register will be used when this segment becomes deallocated, for now set to 0
                let heap[memFragPointer + 2 + currentMemFragSize - sizeNeeded] = 0;
                //This register is used to show how much space we have left in this memory segment, this is used for memory allocation
                let heap[memFragPointer + 3 + currentMemFragSize - sizeNeeded] = size;
                //This value points to the origin memory address for the new allocated object
                let memoryPointer = memFragPointer + 4 + currentMemFragSize - sizeNeeded;
                //Set size of current memFragPointer to be reduced by the size needed by the new memory fragment
                let heap[memFragPointer + 1] = heap[memFragPointer + 1] - sizeNeeded;
                //Mem has been allocated, leave the loop
                let memAllocated = true;
            }  
        }

        return memoryPointer;
    }
    
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Boolean memAdded;
        var int memFragPointer;
        let memAdded = false;
        let memFragPointer = freeList-heap;

        //Loop through as long as memory hasn't been added back into the freeList
        while(~memAdded){
            //This is the last memory segment in the freeList
            if(heap[memFragPointer] = 0){
                //Set pointer to the new free memory segment to be it's object pointer subtracted by 2 registers
                let heap[memFragPointer] = o-2;
                //Mem has been deallocated, leave the loop
                let memAdded = true;
            }
            //This is not the last free memory segment in freeList
            else{
                //Go to the next memory segment
                let memFragPointer = heap[memFragPointer];
            }
        }

        return;
    }    
}
