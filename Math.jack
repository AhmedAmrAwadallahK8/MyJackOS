// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x>-1){
            return x;
        } 
        else{
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, bits, y_bit, nBit;
        let sum = 0;
        let nBit = 1;
        let shiftedX = x;
        let i = 0;
        let bits = 16;
        
        while(i < bits){
            let y_bit = y & nBit;
            if(y_bit = 1) {
                sum = sum + shiftedX
            }
            let shiftedX = shiftedX + shiftedX;
            let nBit = nBit + nBit;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        if(y > x){return 0; }
        q = divide(x, y+y);
        if((x - (2*q*y))<y){
            return q + q;
        }
        else{
            return q + q + 1;
        }
    }

    function int pow(int x, int e){
        var int out;
        let out = x;
        while(e > 1){
            let out = out * x;
            let e = e - 1;
        }
        return out;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, n, y;
        let y = 0;
        let n = 8;
        let j = 4;
        while(pow(2,n)-1>0){
            if((y+pow(2,j))*(y+pow(2,j)) < x + 1){
                let y = y + pow(2,j)
            }
            let j = j - 1;
            let n = 2*j;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        if(b>a){
            return b;
        }
        if(a=b){
            return a
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a>b){
            return b;
        }
        if(b>a){
            return a;
        }
        if(a=b){
            return a;
        }
    }
}
