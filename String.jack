// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int currentL;
    field Array str;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength > 0){let str = Array.new(maxLength); }
        let currentL = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentL;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[currentL] = c;
        let currentL = currentL + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[currentL] = 0;
        if(currentL > 0){let currentL = currentL - 1; }
        return;
    }

    // 0 = 48, 1 = 49, 2 = 50, 3 = 51, 4 = 52, 5 = 53, 6 = 54, 7 = 55, 8 = 56, 9 = 57 
    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() { //Wrong Value
        var int i, val, dig, negate;
        var boolean exit;
        let exit = false;
        let val = 0;
        let negate = 1;
        if(str[i] = 45){let i = 1; let negate = -1; }
        while((i < currentL) & ~exit){
            let dig = str[i];
            if((dig>47) & (dig<58)){
                let val = (val*10 + dig);
                let i = i + 1;
            }
            else{let exit = true; }
        }


        return val*negate;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {//Not working
        var int lstDig; 
        var char charDig; 
        // a % b = a - (b * int(a/b)) Modulus Math Expression
        let lstDig = val - (10*(val/10)); //TODO
        //let charDig = lstDig;
        /**if(lstDig = 48){let charDig = 48; }
        if(lstDig = 49){let charDig = 49; }
        if(lstDig = 50){let charDig = 50; }
        if(lstDig = 51){let charDig = 51; }
        if(lstDig = 52){let charDig = 52; }
        if(lstDig = 53){let charDig = 53; }
        if(lstDig = 54){let charDig = 54; }
        if(lstDig = 55){let charDig = 55; }
        if(lstDig = 56){let charDig = 56; }
        if(lstDig = 57){let charDig = 57; }*/
        if (val < 10){
            do appendChar(lstDig);
            return;
        }
        else{
            do setInt(val/10);
            do appendChar(lstDig);
            return;
        }
    }

    // new line = 128 
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    // backspace = 129
    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    // " = 34
    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
