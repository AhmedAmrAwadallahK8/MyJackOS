// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Boolean color;

    //Screen goes from register 16384 to 24575. Screen resolution is 256x512
    /** Initializes the Screen. */
    function void init() {
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int addr;
        let addr = 16384;
        while(addr < 24576){
            do Memory.poke(addr, 0);
            let addr = addr + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, val, bit_num, i, bit;
        //Find register containing the pixel
        let addr = 32*y + x/16;
        //Retrieve register
        let val = Memory.peek[16384+addr];
        //Find bit in register to operate on
        // a % b = a - (b * int(a/b)) Modulus Math Expression
        let bit_num = x - (16*(x/16));
        //Using bit_num create a 16 bit version of this bit
        let i = 0;
        let bit = 1;
        while(i < bit_num){
            let bit = bit + bit;
            let i = i + 1;
        }
        //Based on color perform an operation
        if(color){  //Turn bit on
            let val = val | bit;
        }
        else{  // Turn bit off
            let val = ~val;  // 16 bit Not
            let val = val | bit; // 16 bit Or (In not space)
            let val = ~val;  // 16 bit Not
        }
        do Memory.poke(addr, val);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        let dx = x2-x1;
        let dy = y2-y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        //Vertical Line
        if(dx = 0){
            while((b<dy) | (b=dy)){
                if(dy > 0){do drawPixel(x, y+b); }  // Go South
                else{do drawPixel(x, y-b); }  // Go North
                let b = b + 1;
            }
        }
        //Horizontal Line
        if(dy = 0){
            while((a<dx) | (a=dx)){
                if(dx > 0){do drawPixel(x+a, y); }  // Go East
                else{do drawPixel(x-a, y); }  // Go West
                let a = a + 1;
            }
        }
        //Sloped Line
        if(~(dy = 0) & ~(dx = 0)){
            while(((a<dx) | (a=dx)) & ((b<dy) | (b=dy))){
                if(dx > 0){  // Go BLANKEast
                    if (dy > 0){do drawPixel(x+a, y+b); }  // SouthEast
                    else{do drawPixel(x+a, y-b); }  // NorthEast
                }
                else{  // Go BLANKWest
                    if (dy > 0){do drawPixel(x-a, y+b); } // SouthWest
                    else{do drawPixel(x-a, y-b);}  // NorthWest
                }
                if(diff<0){
                    let a = a+1;
                    let diff = diff + dy;
                }
                else{
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        let dx = x2-x1;
        let dy = y2-y1;

    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
